image:
  repository: kubeshop/testkube-executor-keptn # Container Image Name
  pullPolicy: IfNotPresent                   # Kubernetes Image Pull Policy
  tag: "0.12.0"                                    # Container Tag
service:
  enabled: true                              # Creates a Kubernetes Service for the testkube-executor-keptn

distributor:
  stageFilter: ""                            # Sets the stage this helm service belongs to
  serviceFilter: ""                          # Sets the service this helm service belongs to
  projectFilter: ""                          # Sets the project this helm service belongs to
  pubsubTopic: "sh.keptn.>"                  # Sets the events the service subscribes to
  image:
    repository: docker.io/keptn/distributor  # Container Image Name
    pullPolicy: IfNotPresent                 # Kubernetes Image Pull Policy
    tag: "0.12.0"                            # Container Tag

# If this microservice is running on the same K8S cluster as the control plane components (eg. bridge, shipyard controller etc.)
# Then leave this as false. In this case, the distributor will listen for events using NATS.
# If this service is running on a different K8S cluster to the control plane components, then set this to true and fill in the details
# In this mode, the distributor container regularly polls the Keptn API via HTTPS and authenticates with the API token
remoteControlPlane:
  enabled: false                             # Enables remote execution plane mode
  api:
    protocol: "http"                        # Used Protocol (http, https)
    hostname: ""                            # Hostname of the control plane cluster (and Port)
    apiValidateTls: true                     # Defines if the control plane certificate should be validated
    token: ""                                # Keptn API Token

imagePullSecrets: []                         # Secrets to use for container registry credentials

serviceAccount:
  create: true                               # Enables the service account creation
  annotations: {}                            # Annotations to add to the service account
  name: ""                                   # The name of the service account to use.

podAnnotations: {}                           # Annotations to add to the created pods

podSecurityContext: {}                       # Set the pod security context (e.g. fsGroups)
  # fsGroup: 2000

securityContext: {}                          # Set the security context (e.g. runAsUser)
#  readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

resources:                                 # Resource limits and requests
  requests:
     cpu: 100m
     memory: 128Mi

nodeSelector: {}                                # Node selector configuration

tolerations: []                                 # Tolerations for the pods

affinity: {}                                    # Affinity rules
